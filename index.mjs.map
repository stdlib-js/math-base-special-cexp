{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex-float64';\nimport copysign from '@stdlib/math-base-special-copysign';\nimport sincos from '@stdlib/math-base-special-sincos';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInfinite from '@stdlib/math-base-assert-is-infinite';\nimport exp from '@stdlib/math-base-special-exp';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport NINF from '@stdlib/constants-float64-ninf';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// MAIN //\n\n/**\n* Evaluates the exponential function for a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n* import cexp from '@stdlib/math-base-special-cexp';\n*\n* var v = cexp( new Complex128( 0.0, 0.0 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 1.0\n*\n* var im = imag( v );\n* // returns 0.0\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n* import cexp from '@stdlib/math-base-special-cexp';\n*\n* var v = cexp( new Complex128( 1.0, 0.0 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns ~2.718\n*\n* var im = imag( v );\n* // returns 0.0\n*/\nfunction cexp( z ) {\n\tvar out;\n\tvar im;\n\tvar re;\n\tvar e;\n\n\tre = real( z );\n\tim = imag( z );\n\n\tif ( isnan( re ) ) {\n\t\tre = NaN;\n\t\tim = ( im === 0.0 ) ? im : re;\n\t} else if ( isInfinite( im ) ) {\n\t\tif ( re === PINF ) {\n\t\t\tre = -re;\n\t\t\tim = NaN;\n\t\t} else if ( re === NINF ) {\n\t\t\tre = -0.0;\n\t\t\tim = copysign( 0.0, im );\n\t\t} else {\n\t\t\tre = NaN;\n\t\t\tim = NaN;\n\t\t}\n\t} else {\n\t\te = exp( re );\n\t\tif ( im === 0.0 ) {\n\t\t\tre = e;\n\t\t} else {\n\t\t\tout = sincos( im );\n\t\t\tre = out[ 1 ] * e;\n\t\t\tim = out[ 0 ] * e;\n\t\t}\n\t}\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default cexp;\n"],"names":["cexp","z","out","im","re","e","real","imag","isnan","NaN","isInfinite","PINF","NINF","copysign","exp","sincos","Complex128"],"mappings":";;q3BAwEA,SAASA,EAAMC,GACd,IAAIC,EACAC,EACAC,EACAC,EA6BJ,OA3BAD,EAAKE,EAAML,GACXE,EAAKI,EAAMN,GAENO,EAAOJ,IACXA,EAAKK,IACLN,EAAc,IAAPA,EAAeA,EAAKC,GAChBM,EAAYP,GAClBC,IAAOO,GACXP,GAAMA,EACND,EAAKM,KACML,IAAOQ,GAClBR,GAAM,EACND,EAAKU,EAAU,EAAKV,KAEpBC,EAAKK,IACLN,EAAKM,MAGNJ,EAAIS,EAAKV,GACG,IAAPD,EACJC,EAAKC,GAGLD,GADAF,EAAMa,EAAQZ,IACJ,GAAME,EAChBF,EAAKD,EAAK,GAAMG,IAGX,IAAIW,EAAYZ,EAAID,EAC5B"}